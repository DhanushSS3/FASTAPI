# app/schemas/order.py

from typing import Optional, Any
from pydantic import BaseModel, Field
from decimal import Decimal

# Schema for receiving order placement requests
class OrderPlacementRequest(BaseModel):
    order_id: str
    symbol: str = Field(..., alias="order_company_name")
    order_type: str
    order_price: Decimal
    order_quantity: Decimal
    stop_loss: Optional[Decimal] = None
    take_profit: Optional[Decimal] = None
    user_id: Optional[int] = None  # <-- Service account user targeting

    class Config:
        from_attributes = True
        populate_by_name = True

class CloseOrderRequest(BaseModel):
    order_id: str = Field(..., description="The ID of the order to be closed.")
    close_price: Decimal = Field(..., description="The price at which the order is being closed.")
    user_id: Optional[int] = None  # <-- Service account user targeting

    class Config:
        from_attributes = True

# Schema for creating an order in the database (internal use, after calculations)
class OrderCreateInternal(BaseModel):
    """
    Pydantic schema for creating an order record in the database.
    Includes calculated fields like margin and contract_value.
    """
    order_id: str # Generated by the system (UUID)
    order_status: str
    order_user_id: int
    order_company_name: str # This will be the symbol
    order_type: str
    order_price: Decimal # This will be the *adjusted* price
    order_quantity: Decimal
    contract_value: Decimal # Calculated
    margin: Decimal # Calculated (in USD)

    # Optional fields
    net_profit: Optional[Decimal] = None
    close_price: Optional[Decimal] = None
    swap: Optional[Decimal] = None
    commission: Optional[Decimal] = None # This might also be calculated based on group settings
    stop_loss: Optional[Decimal] = None
    take_profit: Optional[Decimal] = None
    cancel_message: Optional[str] = None
    close_message: Optional[str] = None
    status: Optional[int] = 1 # Assuming a default status, e.g., 1 for active/open

    # New fields for Take Profit and Stop Loss Order IDs
    takeprofit_id: Optional[str] = None
    stoploss_id: Optional[str] = None

    class Config:
        from_attributes = True


# Schema for order response
class OrderResponse(OrderCreateInternal): # Inherits all fields from OrderCreateInternal
    id: int # DB primary key
    created_at: Any # Using Any for datetime for now, can be more specific
    updated_at: Any # Using Any for datetime

    class Config:
        from_attributes = True

# --- NEW Schema for Close Order Request Body ---



from pydantic import BaseModel, Field, model_validator
from decimal import Decimal
from typing import Optional

class UpdateStopLossTakeProfitRequest(BaseModel):
    order_id: str
    stop_loss: Optional[Decimal] = None
    take_profit: Optional[Decimal] = None
    stoploss_id: Optional[str] = None
    takeprofit_id: Optional[str] = None

    @model_validator(mode="after")
    def validate_tp_sl(self) -> 'UpdateStopLossTakeProfitRequest':
        if not self.stop_loss and not self.take_profit:
            raise ValueError("Either stop_loss or take_profit must be provided.")
        if self.stop_loss and not self.stoploss_id:
            raise ValueError("stoploss_id is required when stop_loss is provided.")
        if self.take_profit and not self.takeprofit_id:
            raise ValueError("takeprofit_id is required when take_profit is provided.")
        return self

    class Config:
        from_attributes = True


