# app/schemas/order.py

from typing import Optional, Any
from pydantic import BaseModel, Field # Add Field
from decimal import Decimal

# Schema for receiving order placement requests
class OrderPlacementRequest(BaseModel):
    """
    Pydantic schema for the data required from the user to place a new order.
    Margin and contract_value will be calculated on the backend.
    order_company_name will be the symbol.
    """
    # order_status: str # Status will be set by the backend, e.g., "PENDING" or "OPEN"
    # order_user_id: int # Will be taken from the authenticated user
    order_id: str
    symbol: str = Field(..., alias="order_company_name") # User provides symbol, maps to order_company_name
    order_type: str # e.g., "BUY", "SELL"
    order_price: Decimal # The price at which the user wants to place the order (or market price if market order)
    order_quantity: Decimal # Number of units/lots

    # Optional fields that the user might set
    stop_loss: Optional[Decimal] = None
    take_profit: Optional[Decimal] = None

    class Config:
        from_attributes = True # For Pydantic V2+
        populate_by_name = True # To allow alias usage


# Schema for creating an order in the database (internal use, after calculations)
class OrderCreateInternal(BaseModel):
    """
    Pydantic schema for creating an order record in the database.
    Includes calculated fields like margin and contract_value.
    """
    order_id: str # Generated by the system
    order_status: str
    order_user_id: int
    order_company_name: str # This will be the symbol
    order_type: str
    order_price: Decimal # This will be the *adjusted* price
    order_quantity: Decimal
    contract_value: Decimal # Calculated
    margin: Decimal # Calculated (in USD)

    # Optional fields
    net_profit: Optional[Decimal] = None
    close_price: Optional[Decimal] = None
    swap: Optional[Decimal] = None
    commission: Optional[Decimal] = None # This might also be calculated based on group settings
    stop_loss: Optional[Decimal] = None
    take_profit: Optional[Decimal] = None
    cancel_message: Optional[str] = None
    close_message: Optional[str] = None
    status: Optional[int] = 1 # Assuming a default status, e.g., 1 for active/open

    class Config:
        from_attributes = True


# Schema for order response
class OrderResponse(OrderCreateInternal): # Inherits all fields from OrderCreateInternal
    id: int # DB primary key
    created_at: Any # Using Any for datetime for now, can be more specific
    updated_at: Any # Using Any for datetime

    class Config:
        from_attributes = True