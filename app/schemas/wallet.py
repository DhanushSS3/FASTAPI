# app/schemas/wallet.py

import datetime
from typing import Optional
from pydantic import BaseModel, Field
from decimal import Decimal # Import Decimal

# Schema for data used to create a wallet transaction record
class WalletCreate(BaseModel):
    """
    Pydantic model for creating a new wallet transaction record.
    Includes optional description field.
    """
    user_id: int = Field(..., description="The ID of the user associated with the transaction.")
    # symbol, order_quantity, order_type are nullable in the model, make them optional here
    symbol: Optional[str] = Field(None, description="The symbol of the asset involved (optional).")
    order_quantity: Optional[Decimal] = Field(None, max_digits=18, decimal_places=8, description="The quantity of the order (optional).")
    transaction_type: str = Field(..., description="The type of transaction (e.g., 'deposit', 'withdrawal', 'trade').")
    is_approved: int = Field(0, description="Approval status (0 or 1), defaults to 0.") # Default handled by model, but good to show
    order_type: Optional[str] = Field(None, description="The type of order (e.g., 'buy', 'sell') (optional).")
    transaction_amount: Decimal = Field(..., max_digits=18, decimal_places=8, description="The amount of the transaction.")

    # --- NEW FIELD ---
    description: Optional[str] = Field(None, description="Optional description for the transaction.")
    # --- END NEW FIELD ---

    # transaction_time and transaction_id are generated by the backend
    # created_at and updated_at are handled by database defaults


# Schema for data returned when fetching wallet transaction records
class WalletResponse(BaseModel):
    """
    Pydantic model for returning wallet transaction record data.
    Includes all fields from the Wallet model.
    """
    id: int = Field(..., description="Unique identifier of the wallet transaction record.")
    user_id: int = Field(..., description="The ID of the user associated with the transaction.")
    symbol: Optional[str] = Field(None, description="The symbol of the asset involved (optional).")
    order_quantity: Optional[Decimal] = Field(None, max_digits=18, decimal_places=8, description="The quantity of the order (optional).")
    transaction_type: str = Field(..., description="The type of transaction.")
    is_approved: int = Field(..., description="Approval status (0 or 1).")
    order_type: Optional[str] = Field(None, description="The type of order (optional).")
    transaction_amount: Decimal = Field(..., max_digits=18, decimal_places=8, description="The amount of the transaction.")

    # --- NEW FIELD ---
    description: Optional[str] = Field(None, description="Optional description for the transaction.")
    # --- END NEW FIELD ---

    transaction_time: Optional[datetime.datetime] = Field(None, description="Timestamp when the transaction was approved (optional).")
    transaction_id: str = Field(..., description="Unique transaction ID.")
    created_at: datetime.datetime = Field(..., description="Timestamp when the record was created.")
    updated_at: datetime.datetime = Field(..., description="Timestamp when the record was last updated.")

    class Config:
        from_attributes = True # Allow mapping from SQLAlchemy models
